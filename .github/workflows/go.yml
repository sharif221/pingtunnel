name: Manual Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Git tag to create (e.g. v1.0.0)'
        required: true
        default: 'v0.1.0'
      release_name:
        description: 'Release title'
        required: true
        default: 'Release ${{ github.event.inputs.tag_name }}'
      body:
        description: 'Release notes (Markdown OK)'
        required: false
        default: ''
      prerelease:
        description: 'Mark as prerelease?'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-path: ${{ steps.build.outputs.binary-path }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21

      - name: Build
        id: build
        run: |
          go mod tidy
          go build -o myapp ./...
          echo "::set-output name=binary-path::myapp"

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: myapp
          path: ${{ steps.build.outputs.binary-path }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: myapp

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          release_name: ${{ github.event.inputs.release_name }}
          body: ${{ github.event.inputs.body }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./myapp
          asset_name: myapp-${{ runner.os }}-amd64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
